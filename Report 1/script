# script
import pandas as pd
from scipy.stats import chi2_contingency

# Load and clean data
file_path = '/Users/jsand/OneDrive/Desktop/AG2/Code_Interpreter/Crypto_Survey_Data.csv'
df = pd.read_csv(file_path)
df.replace('nan', pd.NA, inplace=True)
df.dropna(how='all', inplace=True)
df = df.dropna(axis=1, how='all')

# Identify columns
columns = df.columns.tolist()

# Heuristic to identify demographic questions:
# Assume demographic questions contain keywords like 'age', 'gender', 'income', 'education', 'ethnicity', 'region', 'country'
demographic_keywords = ['age', 'gender', 'income', 'education', 'ethnicity', 'region', 'country']
demographic_cols = [col for col in columns if any(k in col.lower() for k in demographic_keywords)]

# Survey questions are all columns except demographic columns
survey_cols = [col for col in columns if col not in demographic_cols]

# 1. Frequency tables for each question
def frequency_table(series):
    counts = series.value_counts(dropna=True)
    percentages = series.value_counts(normalize=True, dropna=True) * 100
    freq_df = pd.DataFrame({'Count': counts, 'Percentage': percentages.round(2)})
    total_row = pd.DataFrame({'Count': [counts.sum()], 'Percentage': [percentages.sum().round(2)]}, index=['Total'])
    freq_df = pd.concat([freq_df, total_row])
    return freq_df

freq_tables = {}
for col in columns:
    # Remove missing values for frequency calculation
    freq_tables[col] = frequency_table(df[col].dropna())

# 2. Crosstabulations for first five survey questions with each demographic question
first_five_survey = survey_cols[:5]
crosstabs = {}
for survey_q in first_five_survey:
    for demo_q in demographic_cols:
        # Drop rows with missing values in either column
        temp_df = df[[survey_q, demo_q]].dropna()
        if temp_df.empty:
            continue
        ct = pd.crosstab(temp_df[survey_q], temp_df[demo_q], dropna=True)
        crosstabs[(survey_q, demo_q)] = ct

# 3. Chi-square tests on each crosstab
chi2_results = {}
for key, ct in crosstabs.items():
    if ct.shape[0] < 2 or ct.shape[1] < 2:
        # Chi-square test requires at least 2 rows and 2 columns
        chi2_results[key] = {'chi2': None, 'p': None, 'significant': False}
        continue
    chi2, p, dof, expected = chi2_contingency(ct)
    significant = p < 0.05
    chi2_results[key] = {'chi2': chi2, 'p': p, 'significant': significant}

# 4. Create markdown report
def df_to_markdown(df):
    return df.to_markdown()

report_lines = []

# Frequency tables section
report_lines.append("# Survey Frequency Tables\n")
for col in columns:
    report_lines.append(f"## Question: {col}\n")
    report_lines.append(freq_tables[col].to_markdown())
    report_lines.append("\n")

# Crosstabs and chi-square results section
report_lines.append("# Crosstabulations and Chi-Square Test Results\n")
for (survey_q, demo_q), ct in crosstabs.items():
    report_lines.append(f"## Crosstab: {survey_q} vs {demo_q}\n")
    report_lines.append(ct.to_markdown())
    chi2_res = chi2_results[(survey_q, demo_q)]
    if chi2_res['chi2'] is None:
        report_lines.append("\nChi-square test not applicable (insufficient data).\n")
    else:
        signif_text = "Yes" if chi2_res['significant'] else "No"
        report_lines.append(f"\nChi-square statistic: {chi2_res['chi2']:.4f}  \n"
                            f"P-value: {chi2_res['p']:.4f}  \n"
                            f"Statistically significant (p < 0.05): {signif_text}\n")
    report_lines.append("\n")

# Save report to markdown file
report_text = "\n".join(report_lines)
with open("survey_results_run_1.md", "w", encoding="utf-8") as f:
    f.write(report_text)

print("Report saved as 'survey_results_run_1.md'")